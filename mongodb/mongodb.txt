# 关系查询$
	大于($gt)
	小于($lt)
	大于等于($gte)
	小于等于($lte)
	不等于($ne)
	等于($eq)
	范例：find({"age":{$gt:20}});

# 逻辑查询
	与($and)
		范例：find({age:{$gte:19,$lte:20}});
	或($or)
		范例：find({$or:[{age:{$gt:19}},{score:{$lt:90}}]});
	或的求反
		范例：find({$nor:[{},{}]})
	
# 求模
	$mod	
	语法{$mod:[数字,余数]}
	
# 范围运算
	$in
		范例：find({name:{$in:["张三","张四"]}});
	$nin
		范例：find({name:{$nin:["张三","张四"]}});
	
# 数组查询
	$all
		范例：显示学生信息里面包含语文和数学的内容
		db.student.find({course:{$all:["语文","数学"]}}).pretty();
		还可以使用数组的下标来做判断：find({course.1:"数学"});
	$size
		范例：查询数组长度
		find({course:{$size:2}});
	$slice
		只提取中间部分信息
		find({age:19,{course:{$slice:-2}}});
		跳过1后面取两个
		find({age:19,{course:{$slice:[1,2]}}});
		
# 嵌套集合运算
	$elemMatch
	范例：find({$and:[
				{age:{$gte:19}},
				{parents:{$elemMatch:{job:"局长"}}}
			]});
			
# 字段是否存在判断
	find({parents:{$exists:true}});
	
# where条件过滤(不适于数据量大，不会使用索引会执行javascript)
	find({$where:"this.age > 20"});
	
# 正则运算(是使用perl兼容正则表达式)
	i:不区分大小写
	m:多行查找
	x:空白字符或者字符类中以外的
	s:任意字符
	简写：find({name:/张/}); find({name:/a/i});
	基本语法：find(name:{$regex:/张/});

# 数据排序(升序：1，降序：-1)
	设定字段排序
	sort({score:-1});
	自然排序
	sort({$natural:-1});
	
# 分页显示
	skip(n);	表示跨过n行数据
	limit(n);	取出n行数据
	范例：find().skip(0).limit(5).sort({age:-1});
	
# 更新函数操作
	save();
	--不推荐使用
	范例：save({id:"",age:20});
	
	update({更新条件},{更新对象},upsert,multi);
	--语法很麻烦
	--upsert：true:更新内容不存在时新增一条,false:不
	--multi:true:更新多条,false:跟新内容有多条只更新第一条
	范例：update({age:19},{$set:{score:100}},false,true);
	
# 修改器
	--数据的修改会扯到内容的结构变更时候需要使用修改器
	1：$inc	
		--主要针对于一个数字字段，运算字段数据内容
		update({age:19},{$inc:{score:-30,age:-1}})；
	2：$set		
		--进行内容重新设置
		update({age:20},{$set:{score:90}});
	3：$unset	
		--删除某个成员的内容
		update({name:"张三"},{$unset:{age:1,score:1}});
	4：$push	
		--追加内容至成员(使用于数组)
		update({name:"张三"},{$push:{arrs:"a"}});
	5：$pushAll
		--余push相似，可直接最佳数组
	6；$addToSet	--添加新元素，当这个元素不存在的时候
		--于push相似，会判断内容是否存在，不存在时不会添加
		update({name:"张三"},{$addToSet:{type:"啊"}});
	7：$pop
		--删除数组内的数据，下标=-1删除第一个，=1删除最后一个
		update({name:"张三"},{$pop:{arrs:下标}});
	8：$pull
		--从数组内删除一个指定内容的数据
		update({name:"张三"},{$pull:{arrs:"a"}});
	9：$pullAll
		--一次性删除多个内容
		update({name:"张三"},{$pull:{arrs:["a","b"]}});
	10：$rename
		--位成员名称重命名
		update({name:"张三"},{$rename:{旧名称:新名称}});

# 删除数据
	--参数=true表示只删除1条，默认false
	remove({删除条件},参数);
	
# 游标(mongodb是最简单的)
	1：使用find()方法获取返回结果集
	2：判断是否有下一行数据：hasNext()
	3：取出当前数据：next()
	范例：
		var c = db.student.find();
		while (c.hasNext())
		{
			var obj = c.next();
			print(obj.name);
			--输出对象 printjson(obj);
		}

# 索引(重要)
	查看当前表的索引
		db.student.getIndexes();
	手动创建普通索引
		db.student.ensureIndex({name:1});
		-- 1表示索引按照升序排列，-1表示降序排列
	使用explain()方法查看执行计划
		db.student.find({name:"张三"}).explain();
	使用hint()方法强制使用索引
		db.student.find({name:"张三"}).hint({name:1}).explain();
	删除索引
		db.student().dropIndex({name:1});
	删除全部索引
		db.student.dropIndexes();
		
	唯一索引(列内容不可重复否则会报错)
		db.student.ensureIndex({name:1},{unique:true});
	过期索引(需要保存时间信息)
		语法
			设置索引在10s后过期
			db.phones.ensureIndex({time:1},{expireAfterSeconds:10});
		--添加测试数据
		db.phones.insert({tel:"110",code:"110",time:new Date()});
		db.phones.insert({tel:"111",code:"111",time:new Date()});
		db.phones.insert({tel:"112",code:"112",time:new Date()});
		10秒后这些数据将会被删除，但基本时间不准确会有延时
	全文索引
		--新建测试数据
		db.news.insert({title:"abcd",content:"defg"});
		db.news.insert({title:"defg",content:"abcd"});
		db.news.insert({title:"aa",content:"tt"});
		db.news.insert({title:"yy",content:"dd"});
		--创建索引
		db.news.ensureIndex({title:"text",content:"text"});
		--创建全字段索引(效率慢)
		db.news.ensureIndex({"$**":"text"});
		--实现模糊查询
			若果要想表示出全文检索，则使用$text判断符，而要想进行数据的查询则使用$search运算符
			查询指定关键字：{$search:"关键字"}
				db.news.find({$text:{$search:"abcd"}});
			查询多个关键字(或关系)：{$search:"关键字 关键字"}
				db.news.find({$text:{$search:"aa dd"}});
			查询多个关键字(与关系)：{$search:"\"关键字\" \"关键字\""}
				db.news.find({$text:{$search:"\"yy\" \"dd\""}});
			查询多个关键字(排除某一个)：{$search:"关键字 关键字 -关键字"}
				db.news.find({$text:{$search:"yy -aa"}});
			进行全文索引使用相似度打分来判断检索成果，使用与信息搜索
				db.news.find({$text:{$search:"aa"}},{score:{$meta:"textScore"}});
	
# 地理信息索引
	1：创建测试数据
		db.shop.insert({loc:[10,10]});
		db.shop.insert({loc:[11,10]});
		db.shop.insert({loc:[10,11]});
		db.shop.insert({loc:[12,15]});
		db.shop.insert({loc:[16,17]});
	2：2D平面索引
		-- 创建索引
		db.shop.ensureIndex({loc:"2d"});
		$near查询：查询距离某个点最近的坐标点
			--默认返回前面100个点的数据,可使用$maxDistance设置大小
			db.shop.find({loc:{"$near":[11,11],"$maxDistance":5}});
		$geoWithi：查询某个形状内的点
	3：2DSphere球面索引
	
# 聚合(重点)
	1：取得集合的数据量
		db.student.count();
	2：去重
		db.runCommand({distinct:"student",key:"name"});
	3：group 操作
		--求年龄大于等于19岁的每个年龄的人数
		db.runCommand({"group":{
			"ns":"student",
			"key":{age:true},
			"initial":{count:0},
			"condition":{age:{"$gte":19}},
			"$reduce":function(doc,prev){
				prev.count++;
			}
		}});
	4：MapReduce
		--按成绩分组，取出人的名字
		var scoreMapFun = function(){
			emit(this.score,this.name);
		};
		var scoreReduceFun = function(key,values){
			return {score:key,names:values};
		};
		//加工处理，可省略
		var scoreFinalizeFun = function(key,values){
			if (key == 80){
				return {score:key,names:values,info:"aa"};
			}
			return {score:key,names:values};
		};
		db.runCommand({
			"mapreduce":"emps",
			"map":scoreMapFun,
			"reduce":scoreReduceFun,
			"out":"result_dmp",
			"finalize":scoreFinalizeFun
		});
		
		//按性别分组，求最小年龄，最大年龄，平均成绩，姓名
		var sexMap = function(){
			emit(this.sex,{count:1,minAge:this.age,maxAge:this.age,score:this.score,name:this.name});
		};
		var sexReduce = function(key,values){
			var count = 0;
			var totalScore = 0;
			var maxAge = values[0].maxAge;
			var minAge = values[0].minAge;
			var names = new Array();
			for (var i in values){
				count += values[i].count;
				totalScore += values[i].score;
				if (minAge >= values[i].minAge) minAge = values[i].minAge;
				if (maxAge <= values[i].maxAge) maxAge = values[i].maxAge;
				names[i] = values[i].name;
			}
			var avgScore = (totalScore/count).toFixed(2);
			return {count:count,totalScore:totalScore,maxAge:maxAge,minAge:minAge,avgScore:avgScore,names:names};
		};
		db.runCommand({
					"mapreduce":"emps",
					"map":sexMap,
					"reduce":sexReduce,
					"out":"result_dmp"
				});
		
	5：$group(分组是无序的，并在内存中计算)
		--成绩大于等于50小于等于80
		db.emps.aggregate([
			{$match:{score:{$gte:50,$lte:80}}}
		]);
		group 实现分组功能
			--求性别总人数
			db.emps.aggregate([
				{$group:{_id:"$sex",job_count:{$sum:1}}}
			]);
			--求job的总成绩
			db.emps.aggregate([
				{$group:{_id:"$job",job_sal:{$sum:"$score"}}}
			]);
			--求job的平均成绩
			db.emps.aggregate([
				{$group:{
					_id:"$job",
					job_sal:{$sum:"$score"},
					job_avg:{$avg:"$score"}
				}}
			]);
			--求最低与最高成绩
			db.emps.aggregate([
				{$group:{
					_id:"$job",
					job_sal:{$sum:"$score"},
					job_avg:{$avg:"$score"},
					job_min:{$min:"$score"},
					job_max:{$max:"$score"},
				}}
			]);
			--计算职位的分数数据按数组显示
			db.emps.aggregate([
				{$group:{
					_id:"$job",
					sal_data:{$push:"$score"},
					sal_name:{$push:"$name"},
					sal_name2:{$addToSet:"$name"},
					sal_name3:{$first:"$name"},
					sal_name4:{$last:"$name"}
				}}
			]);
	6：$project（控制数据列的显示规则）
		范例：只显示name\job列，不显示_id和socre列
			db.emps.aggregate([{$project:{
				_id:0,
				name:1,
				"成绩":"$score",
				score:{"成绩":{$multiply:["$score",2]}}
			}}]);
			可在投影列上进行四则运算+($add),-($subtract),*(multiply),/($divide),%($mod)
		关系运算(返回的布尔)
			大小比较("$cmp"),等于("$eq"),大于("$gt"),判断null("$ifNull")
			db.emps.aggregate([{$project:{
				_id:0,
				name:1,
				score:{"$gte":["$score",50]}
			}}]);
		逻辑运算
			与("$and"),或("$or"),非("$not")
			
		字符串运算
			连接("$concat"),截取("$substr"),小写("$toLower"),大写("$toUpper"),
			不区分大小写("$strcasecmp")
	
	7：sort
		db.emps.aggregate({"$sort":{age:-1}});
		
	8：分页处理($limit,$skip)
		$skip	表示跨过n行数据
		$limit	取出n行数据
		db.emps.aggregate([
			{$project:{_id:0,name:1}},
			{$limit:2}
		]);
		
	9：$unwind(将数组平铺)
		db.depts.aggregate([{$unwind:"$buy"}]);
		
	10：$geoNear(得到附件的坐标点,表中要有地理索引)
		db.shop.aggregate([
			{$geoNear:{
				near:[11,12],
				distanceField:"loc",
				maxDistance:1,
				num:2
			}}
		]);
		
	11：$out(可以将查询结果输出到结果表里)
		db.emps.aggregate([
			{$out:"emps_info"}
		]);	
		
# 固定集合
	--创建一个空集合（固定）
		--capped 表示固定的集合
		--size 	 表示空间大小
		--max	  表示集合记录大小
		db.createCollection("create_a",{capped:true,size:1024,max:5});
		
# GridFS(大数据存储列如：图片、音乐)

# 用户管理
	--创建用户
	db.createUser({
		user:"hello",
		pwd:"hello",
		roles:[{role:"readWrite",db:"cars"}]
	});
	
# mongodb表连接

	db.a.aggregate([
		{
		  $lookup:{
			from:"b",			--连接的表名
			localField:"id",	--连接的ID
			foreignField:"id",	--连接的ID
			as:"b"				--连接的别名
		  }
		}
	]);

# java执行mongo操作
	

	
		
		
		
		
		


	
			
			
	
	
		
		
		
		
		
		
		
		
		
		
		
	
	


		
	
	
	

	
